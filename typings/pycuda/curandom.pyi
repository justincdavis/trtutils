"""
This type stub file was generated by pyright.
"""

from pytools import memoize_method

"""
This type stub file was generated by pyright.
"""
md5_code = ...
def rand(shape, dtype=..., stream=...):
    ...

if get_curand_version() >= (3, 2, 0):
    direction_vector_set = ...
    _get_direction_vectors = ...
if get_curand_version() >= (4, 0, 0):
    _get_scramble_constants32 = ...
    _get_scramble_constants64 = ...
gen_template = ...
gen_log_template = ...
gen_poisson_template = ...
gen_poisson_inplace_template = ...
random_source = ...
random_skip_ahead32_source = ...
random_skip_ahead64_source = ...
class _RandomNumberGeneratorBase:
    """
    Class surrounding CURAND kernels from CUDA 3.2.
    It allows for generating random numbers with uniform
    and normal probability function of various types.
    """
    gen_info = ...
    gen_log_info = ...
    gen_poisson_info = ...
    gen_poisson_inplace_info = ...
    def __init__(self, state_type, vector_type, generator_bits, additional_source, scramble_type=...) -> None:
        ...
    
    @property
    @memoize_method
    def generators_per_block(self):
        ...
    
    @property
    def state(self):
        ...
    
    def fill_uniform(self, data, stream=...):
        ...
    
    def fill_normal(self, data, stream=...):
        ...
    
    def gen_uniform(self, shape, dtype, stream=...):
        ...
    
    def gen_normal(self, shape, dtype, stream=...):
        ...
    
    if get_curand_version() >= (4, 0, 0):
        def fill_log_normal(self, data, mean, stddev, stream=...):
            ...
        
        def gen_log_normal(self, shape, dtype, mean, stddev, stream=...):
            ...
        
    if get_curand_version() >= (5, 0, 0):
        def fill_poisson(self, data, lambda_value=..., stream=...):
            ...
        
        def gen_poisson(self, shape, dtype, lambda_value, stream=...):
            ...
        
    def call_skip_ahead(self, i, stream=...):
        ...
    
    def call_skip_ahead_array(self, i, stream=...):
        ...
    


class _PseudoRandomNumberGeneratorBase(_RandomNumberGeneratorBase):
    def __init__(self, seed_getter, offset, state_type, vector_type, generator_bits, additional_source, scramble_type=...) -> None:
        ...
    
    def call_skip_ahead_sequence(self, i, stream=...):
        ...
    
    def call_skip_ahead_sequence_array(self, i, stream=...):
        ...
    


def seed_getter_uniform(n):
    ...

def seed_getter_unique(n):
    ...

xorwow_random_source = ...
xorwow_skip_ahead_sequence_source = ...
if get_curand_version() >= (3, 2, 0):
    class XORWOWRandomNumberGenerator(_PseudoRandomNumberGeneratorBase):
        has_box_muller = ...
        def __init__(self, seed_getter=..., offset=...) -> None:
            """
            :arg seed_getter: a function that, given an integer count, will yield an `int32`
              :class:`GPUArray` of seeds.
            """
            ...
        
    
    
mrg32k3a_random_source = ...
mrg32k3a_skip_ahead_sequence_source = ...
if get_curand_version() >= (4, 1, 0):
    class MRG32k3aRandomNumberGenerator(_PseudoRandomNumberGeneratorBase):
        has_box_muller = ...
        def __init__(self, seed_getter=..., offset=...) -> None:
            """
            :arg seed_getter: a function that, given an integer count, will yield an `int32`
              :class:`GPUArray` of seeds.
            """
            ...
        
        def call_skip_ahead_subsequence(self, i, stream=...):
            ...
        
        def call_skip_ahead_subsequence_array(self, i, stream=...):
            ...
        
    
    
def generate_direction_vectors(count, direction=...):
    ...

if get_curand_version() >= (4, 0, 0):
    def generate_scramble_constants32(count):
        ...
    
    def generate_scramble_constants64(count):
        ...
    
sobol_random_source = ...
class _SobolRandomNumberGeneratorBase(_RandomNumberGeneratorBase):
    """
    Class surrounding CURAND kernels from CUDA 3.2.
    It allows for generating quasi-random numbers with uniform
    and normal probability function of type int, float, and double.
    """
    has_box_muller = ...
    def __init__(self, dir_vector, dir_vector_dtype, dir_vector_size, dir_vector_set, offset, state_type, vector_type, generator_bits, sobol_random_source) -> None:
        ...
    


scrambledsobol_random_source = ...
class _ScrambledSobolRandomNumberGeneratorBase(_RandomNumberGeneratorBase):
    """
    Class surrounding CURAND kernels from CUDA 4.0.
    It allows for generating quasi-random numbers with uniform
    and normal probability function of type int, float, and double.
    """
    has_box_muller = ...
    def __init__(self, dir_vector, dir_vector_dtype, dir_vector_size, dir_vector_set, scramble_vector, scramble_vector_function, offset, state_type, vector_type, generator_bits, scramble_type, sobol_random_source) -> None:
        ...
    


if get_curand_version() >= (3, 2, 0):
    class Sobol32RandomNumberGenerator(_SobolRandomNumberGeneratorBase):
        """
        Class surrounding CURAND kernels from CUDA 3.2.
        It allows for generating quasi-random numbers with uniform
        and normal probability function of type int, float, and double.
        """
        def __init__(self, dir_vector=..., offset=...) -> None:
            ...
        
    
    
if get_curand_version() >= (4, 0, 0):
    class ScrambledSobol32RandomNumberGenerator(_ScrambledSobolRandomNumberGeneratorBase):
        """
        Class surrounding CURAND kernels from CUDA 4.0.
        It allows for generating quasi-random numbers with uniform
        and normal probability function of type int, float, and double.
        """
        def __init__(self, dir_vector=..., scramble_vector=..., offset=...) -> None:
            ...
        
    
    
if get_curand_version() >= (4, 0, 0):
    class Sobol64RandomNumberGenerator(_SobolRandomNumberGeneratorBase):
        """
        Class surrounding CURAND kernels from CUDA 4.0.
        It allows for generating quasi-random numbers with uniform
        and normal probability function of type int, float, and double.
        """
        def __init__(self, dir_vector=..., offset=...) -> None:
            ...
        
    
    
if get_curand_version() >= (4, 0, 0):
    class ScrambledSobol64RandomNumberGenerator(_ScrambledSobolRandomNumberGeneratorBase):
        """
        Class surrounding CURAND kernels from CUDA 4.0.
        It allows for generating quasi-random numbers with uniform
        and normal probability function of type int, float, and double.
        """
        def __init__(self, dir_vector=..., scramble_vector=..., offset=...) -> None:
            ...
        
    
    
