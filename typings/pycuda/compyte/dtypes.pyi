"""
This type stub file was generated by pyright.
"""

"""Type mapping helpers."""
__copyright__ = ...
__license__ = ...
class TypeNameNotKnown(RuntimeError):
    ...


class DTypeRegistry:
    def __init__(self) -> None:
        ...
    
    def get_or_register_dtype(self, c_names, dtype=...): # -> dtype[Any]:
        """Get or register a :class:`numpy.dtype` associated with the C type names
        in the string list *c_names*. If *dtype* is `None`, no registration is
        performed, and the :class:`numpy.dtype` must already have been registered.
        If so, it is returned.  If not, :exc:`TypeNameNotKnown` is raised.

        If *dtype* is not `None`, registration is attempted. If the *c_names* are
        already known and registered to identical :class:`numpy.dtype` objects,
        then the previously dtype object of the previously  registered type is
        returned. If the *c_names* are not yet known, the type is registered. If
        one of the *c_names* is known but registered to a different type, an error
        is raised. In this latter case, the type may end up partially registered
        and any further behavior is undefined.

        .. versionadded:: 2012.2
        """
        ...
    
    def dtype_to_ctype(self, dtype):
        ...
    


def fill_registry_with_c_types(reg, respect_windows, include_bool=...): # -> None:
    ...

def fill_registry_with_opencl_c_types(reg): # -> None:
    ...

def fill_registry_with_c99_stdint_types(reg): # -> None:
    ...

def fill_registry_with_c99_complex_types(reg): # -> None:
    ...

TYPE_REGISTRY = ...
DTYPE_TO_NAME = ...
NAME_TO_DTYPE = ...
dtype_to_ctype = ...
get_or_register_dtype = ...
def parse_c_arg_backend(c_arg, scalar_arg_factory, vec_arg_factory, name_to_dtype=...):
    ...

def register_dtype(dtype, c_names, alias_ok=...): # -> None:
    ...

