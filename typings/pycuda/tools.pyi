"""
This type stub file was generated by pyright.
"""

"""Miscallenous helper functionality."""
__copyright__ = ...
__license__ = ...
bitlog2 = ...
DeviceMemoryPool = ...
PageLockedMemoryPool = ...
PageLockedAllocator = ...
class DebugMemoryPool(DeviceMemoryPool):
    def __init__(self, interactive=..., logfile=...) -> None:
        ...
    
    def allocate(self, size):
        ...
    
    def describe(self, stack, size): # -> str:
        ...
    


def get_default_device(default=...):
    ...

def make_default_context(ctx_maker=...):
    ...

class DeviceData:
    def __init__(self, dev=...) -> None:
        ...
    
    def align(self, bytes, word_size=...): # -> int:
        ...
    
    def align_dtype(self, elements, dtype_size): # -> int:
        ...
    
    def align_words(self, word_size):
        ...
    
    def align_bytes(self, word_size=...): # -> Literal[64, 128]:
        ...
    
    def coalesce(self, thread_count): # -> int:
        ...
    
    @staticmethod
    def make_valid_tex_channel_count(size): # -> int:
        ...
    


class OccupancyRecord:
    def __init__(self, devdata, threads, shared_mem=..., registers=...) -> None:
        ...
    


class Argument:
    def __init__(self, dtype, name) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


def dtype_to_ctype(dtype, with_fp_tex_hack=...): # -> Literal['fp_tex_float', 'fp_tex_double', 'fp_tex_cfloat', 'fp_tex_cdouble']:
    ...

class VectorArg(Argument):
    def declarator(self): # -> LiteralString:
        ...
    
    struct_char = ...


class ScalarArg(Argument):
    def declarator(self): # -> LiteralString:
        ...
    
    @property
    def struct_char(self): # -> str:
        ...
    


def parse_c_arg(c_arg): # -> ScalarArg | VectorArg:
    ...

def get_arg_type(c_arg): # -> str:
    ...

context_dependent_memoized_functions = ...
def context_dependent_memoize(func): # -> Callable[..., Any]:
    ...

def clear_context_caches(): # -> None:
    ...

def mark_cuda_test(inner_f): # -> Callable[..., None]:
    ...

def init_cuda_context_fixture(): # -> Generator[None, Any, None]:
    ...

