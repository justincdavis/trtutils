"""
This type stub file was generated by pyright.
"""

from pycuda._driver import *

"""
This type stub file was generated by pyright.
"""
__copyright__ = ...
_memoryview = memoryview
_my_bytes = bytes
ManagedAllocationOrStub = ...
CUDA_DEBUGGING = ...
def set_debugging(flag=...):
    ...

class CompileError(Error):
    def __init__(self, msg, command_line, stdout=..., stderr=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class ArgumentHandler:
    def __init__(self, ary) -> None:
        ...
    
    def get_device_alloc(self):
        ...
    
    def pre_call(self, stream):
        ...
    


class In(ArgumentHandler):
    def pre_call(self, stream):
        ...
    


class Out(ArgumentHandler):
    def post_call(self, stream):
        ...
    


class InOut(In, Out):
    ...


def pagelocked_zeros(shape, dtype, order=..., mem_flags=...):
    ...

def pagelocked_empty_like(array, mem_flags=...):
    ...

def pagelocked_zeros_like(array, mem_flags=...):
    ...

def aligned_zeros(shape, dtype, order=..., alignment=...):
    ...

def aligned_empty_like(array, alignment=...):
    ...

def aligned_zeros_like(array, alignment=...):
    ...

def managed_zeros(shape, dtype, order=..., mem_flags=...):
    ...

def managed_empty_like(array, mem_flags=...):
    ...

def managed_zeros_like(array, mem_flags=...):
    ...

def mem_alloc_like(ary):
    ...

def dtype_to_array_format(dtype):
    ...

def matrix_to_array(matrix, order, allow_double_hack=...):
    ...

def np_to_array(nparray, order, allowSurfaceBind=...):
    ...

def gpuarray_to_array(gpuarray, order, allowSurfaceBind=...):
    ...

def make_multichannel_2d_array(ndarray, order):
    """Channel count has to be the first dimension of the C{ndarray}."""
    ...

def bind_array_to_texref(ary, texref):
    ...

def matrix_to_texref(matrix, texref, order):
    ...

def to_device(bf_obj):
    ...

def from_device(devptr, shape, dtype, order=...):
    ...

def from_device_like(devptr, other_ary):
    ...

